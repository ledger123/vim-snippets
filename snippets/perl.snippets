# #!/usr/bin/perl
snippet	formlookup
	my @${1:cname} = $form->{dbs}->query(qq|SELECT DISTINCT cval FROM lookup WHERE cname='$1' ORDER BY 1|)->arrays;
	${0}
snippet formtrtype
	my @trtype     = $form->{dbs}->query(qq~SELECT id, trtype FROM trtype ORDER BY 2~)->arrays;
	${0}
snippet formdepartment
	my @department = $form->{dbs}->query(qq|SELECT id, description FROM department ORDER BY 2|)->hashes;
snippet formchart
	my @chart = $form->{dbs}->query(qq~
		SELECT id, accno || '-' || description
		FROM chart
		WHERE link LIKE '%_tax%'
		ORDER BY 2~
	)->hashes;
snippet formgroup
	my @partsgroup = $form->{dbs}->query(qq|
		SELECT id, partsgroup
		FROM partsgroup
		ORDER BY 2|
	)->arrays;
snippet formvendor
	my @vendor_id = $form->{dbs}->query(qq|
		SELECT id, name
		FROM vendor
		WHERE id IN (SELECT DISTINCT vendor_id FROM ap WHERE amount > 0 AND amount <> paid)
		ORDER BY 2
	|)->arrays;

snippet formcustomer
	my @customer_id   = $form->{dbs}->query(qq~
		SELECT c.id, c.name
		FROM customer c
		WHERE c.id IN
		(SELECT ar.customer_id
			FROM ar
			JOIN acc_trans ac ON (ac.trans_id = ar.id)
			JOIN chart c ON (c.id = ac.chart_id)
			GROUP BY ar.customer_id
			HAVING SUM(ac.amount) <> 0)
			AND c.id IN (SELECT btc_id FROM res)
		ORDER BY c.name
	~)->arrays;

snippet formres_id
	my @res_id = $form->{dbs}->query(qq~
		SELECT res.id, room.room || '-' || c.name || ' - Rate:' || res.rate description
		FROM res
		JOIN room ON res.room_id = room.id
		JOIN customer c ON (c.id = res.customer_id)
		WHERE resstatus = 'checkin'
		ORDER BY 2
	~)->arrays;

snippet	setd
	$form->setd('${1:var}');

snippet getd
	$form->{${1:var}} = $form->getd('$1');

snippet dbs
	use DBIx::Simple;
	$form->{dbh} = $form->dbconnect(\%myconfig);
	$form->{dbs} = DBIx::Simple->connect($form->{dbh});

snippet dbslist
	my (${1:$var1}, ${2:$var2} ) = $form->{dbs}->query("SELECT $1, $2 FROM ${3:tablename} WHERE id = ?", $form->{id})->list;

snippet dbsrow
	my $row = $form->{dbs}->query("SELECT * FROM ${1:tablename} WHERE id = ?", $form->{id})->hash or $form->error($form->{dbs}->error);
	for (keys %$row) { $form->{$_} = $row->{$_} }
	${0}

snippet dbsrows
	my @rows = $form->{dbs}->query("SELECT * FROM ${1:tablename} WHERE trans_id = ?", $form->{id})->hashes or $form->error($form->{dbs}->error);
	my $i = 1;
	for my $row (@rows){
		for (keys %$row) {
			$form->{"${_}_$i" = $row->{$_};
			# print "$row->{$_}\n";
		}
		$i++;
	}
	$form->{rowcount} = $i;
	${0}

snippet formfield
	$form1->field(name => '${1:fieldname}', class => '${2:date}', size => '${3:10}', type => '${4:text}', value => '${5:default}');
snippet formoption
	${1:optionname} => \@$1,
snippet formlabel
	${1:labelcol} => $locale->text('${2:Lable}'),
snippet form
	sub form {
		my @form1flds = qw(id ${1:name descripiton});

		my $form1 = CGI::FormBuilder->new(
			method   => 'post',
			table    => 1,
			fields   => \@form1flds,
			required => [qw($1)],
			options  => {
				lookup => \@lookup,
			},
			messages => {form_required_text => '',},
			labels   => {
							id => $locale->text('ID'),
						},
			selectnum => 2,
			submit    => ["Update", "Save", "Save_as_new", "Delete"],
			params    => $form,
			fieldattr  => {class => "form-control form-control-sm"},
			stylesheet => 1,
			template   => {type => 'TT2', template => 'trtypes.form.tmpl', variable => 'form1',},
			keepextras => [qw(id title action path login callback)],
		);
		#$form1->field(name => 'active',    options => '1', value => '1');
		#$form1->field(name => 'description', type => 'textarea');

		if ($form->{admin}) {
			#$form1->field(name => 'fieldname', type => 'static');
		}
		$form->header;
		print $form1->render;
	}

	sub update {
		&form;
	}

	sub save_as_new {
		delete $form->{id};
		&save;
	}

	sub save {
		my $data      = {};
		my @form1flds = qw($1);
		for (@form1flds) { $data->{$_} = $form->{$_} }
			if ($data->{id}) {
			$form->{dbs}->update('${2:tname}', $data, {id => $data->{id}}) or $form->error($form->{dbs}->error);
		}
		else {
			delete $data->{id};
			$form->{dbs}->insert('$2', $data) or $form->error($form->{dbs}->error);
		}
		$form->{dbs}->commit;
	}

	sub edit {
		$row = $form->{dbs}->query(qq~
			SELECT *
			FROM $2
			WHERE id = ?~, $form->{id}
		)->hash;
		for (keys %$row) { $form->{$_} = $row->{$_} }
	}

	sub delete {
		$form->{dbs}->query(qq|DELETE FROM $2 WHERE id = ?|, $form->{id});
		$form->{dbs}->commit;
	}

snippet defaults
	my %defaults = $form->get_defaults($form->{dbh}, \@{['${1:precision}', '${2:company}']});
	for (keys %defaults) { $form->{$_} = $defaults{$_} }

snippet report
	sub ${1:procedurename} {

		my $title = '${2:ReportTitle}';
		my @searchcols = qw(${3:from_date to_date});

		my $form1 = &$1_form($title, \\@searchcols);
		$form->header;
		print $form1->render;

		my $totalcols = [qw(${4:col1 col2 col3})];

		my $groupcol = '${5:groupcol}';

		my $sql = SQL::Abstract->new;
		my %where;
		for (@searchcols){
			$where{$_} = $form->{$_} if $form->{$_} and $_ !~ /(from_date|to_date)/;
		}
		my ($where, @bind) = $sql->where(\%where);

		my $query = qq~
			SELECT
				${6:chart_id, id, transdate, memo, amount, parts_id}
			FROM ${7:tablename}
			$where
			UNION
			SELECT
				null, null, null, null, null, null
			ORDER BY 2
			LIMIT 100
		~;

		my $table1 = &$1_table($query, \@bind, $totalcols, $groupcol);

		$form->header;
		print qq|
			<body>
			<h1>$title</h1>
			<hr/>
		|;

		for (@searchcols){
			my $label = $_; $label =~ tr/_/ /; $label = uc $label;
			print qq|<b>$label</b>: $form->{$_}<br/>\n|;
		};

		print $table1->output;

	q|
	[Custom Reports--$2]
	module=xto.pl
	action=continue
	nextsub=$1
	|
	${0}
	}


	sub $1_form {
		my ($title, $searchcols) = @_;
		$form->{nextsub} = '$1';
		my $template = &$1_template;

		my $form1 = CGI::FormBuilder->new(
			method   => 'post',
			table    => 1,
			title    => $title,
			fields   => $searchcols,
			messages => {form_required_text => '',},
			labels   => {

			},
			submit   => [qw(Continue)],
			options    => {

			},
			params     => $form,
			stylesheet => 1,
			template   => {type => 'TT2', template => \\$template, variable => 'form1',},
			keepextras => [qw(nextsub action path login)],
		);

		return $form1;
	}

	sub $1_table {
		my ($query, $bind, $totalcols, $groupcol) = @_;
		my $table1 = $form->{dbs}->query($query, @$bind)->xto();
		#$table1->drop_cols([qw(memo)]);

		$table1->modify(table => {cellpadding => "3", cellspacing => "2"});
		$table1->modify(tr => {class => ['listrow0', 'listrow1']});
		$table1->modify(th => {class => 'listheading'}, 'head');
		$table1->modify(th => {class => 'listtotal'},   'foot');
		$table1->modify(th => {class => 'listsubtotal'});
		$table1->modify(th => {align => 'center'},      'head');
		$table1->modify(th => {align => 'right'},       'foot');
		$table1->modify(th => {align => 'right'});

		$table1->modify(td => {align => 'right'}, $totalcols);
		$table1->map_cell(sub { return $form->format_amount(\%myconfig, shift, 2) }, $totalcols);
		#$table1->set_group($groupcol, 1);
		#$table1->calc_subtotals($totalcols);
		#$table1->calc_totals($totalcols);

		my $callback = $form->escape($form->{callback});
		my $url = "$form->{script}?action=edit&path=$form->{path}&login=$form->{login}";

		$table1->map_cell(
			sub {
				my $datum = shift;
				my $row   = $table1->get_current_row();
				my $col   = $table1->get_current_col();
				return qq|<a href="$url&id=$datum&callback=$callback">$datum</a>|;
			},
			'id'
		);

		$table1->map_head(sub {
			my $datum = shift;
			$datum =~ tr/_/ /;
			return qq|<a class="listheading">| . uc $datum . qq|</a>|;
			}
		);
		return $table1;
	}

	sub $1_template {
		return q|
	[% form1.jshead %]
	<body onLoad="document.forms[0].reference.focus()" />

	<table width=100%>
	<tr>
		<th class=listtop>[% form1.title %]</th>
	</tr>
	<tr height="5"></tr>
	<tr>
		<td align="top">
		[% form1.start %]
			<table>
				<tr valign="top">
					<td><table>
						[% i = 1 %]
						[% FOREACH field = form1.fields %]
							<tr valign="top">
								<th align="right">[% field.required ? "$field.label *" : field.label %]</th>
								<td>
								[% IF field.invalid %]
								Missing or invalid entry, please try again.<br/>
								[% END %]
								[% field.field %]
								</td>
							</tr>
						[% IF i == 3 OR i == 6 OR i == 9 %]
						</table></td><td><table>
						[% END %]
						[% i = i + 1 %]
						[% END %]
					</td></table>
				</tr>
			</table>
		</td>
	</tr>
	</table>

	<hr size=3 noshade />

	[% form1.submit %] [% form1.reset %]
	[% form1.end %]
	<br/><br/>
	|;

	}

snippet q
	my $query = qq|
		SELECT ${1:id}
		FROM ${2:tablename}
		WHERE ${3:1 = 1}
		ORDER BY 1
	|;
	my @rows = $form->{dbs}->query($query)->hashes;
	print qq|<table>|;
	for (@rows){
		print qq|<tr>|;
		print qq|<td>$_->{id}</td>|;
		print qq|</tr>|;
	}
	print qq|</table>|;

snippet f
	$form->format_amount(\%myconfig, ${1:$amount}, 2)
snippet fv
	$form->{"${1:var}"} = $$1;
snippet fv2
	$${1:var} = $form->{"$1"};
snippet p
	print "${1:text}";
snippet pq
	print qq|
	${0}
	|;
snippet i
	$form->info("${1:text}\n");
snippet e
	$form->error("${1:text}\n");
snippet dbname
	if ($myconfig{dbname} =~ /(${1:munshi10})/){
	# if ($myconfig{dbname} !~ /($1})/){
		$form->error("dbname");
	}
snippet admin
	if ($form->{admin}){
		$form->error("I am here ...");
	}

snippet	table
	<table>
		${0}
	</table>
snippet tr
	<tr class="${1:listrow0"}">
		${0}
	</tr>
snippet td
	<td valign="top">${0}</td>
snippet dumper
	use Data::Dumper; $form->info('<pre>'); print Dumper(${1:$varname}); # $form->error;
snippet debug
	$form->info('<pre>'); $form->debug; # $form->error;
snippet error
	$form->error("${0:$variable}");
snippet blank
	$form->isblank($form->isblank("${1:var}", "${2:varname} cannot be blank ..."));
snippet locale
	$locale->text("${0:text here}")
snippet addlog
	my $ip = $ENV{REMOTE_ADDR};
	($form->{employee}, $form->{employee_id}) = $form->get_employee($form->{dbh}) unless $form->{employee_id};
	$form->{dbs}->query(qq|
		INSERT INTO audittrail (trans_id, formname, tablename, action, login, notes, employee_id, ip)
		VALUES (?,?,?,?,?,?,?,?)|,
			$form->{${1:trans_id}}, '${2:formname}', '${3:tablename}',
			'${4:action}', $form->{login2}, '${5:notes}',
			$form->{employee_id}, $ip
		);
	$form->{dbs}->commit;
snippet showlog
	my $audit = $form->{dbs}->query(qq|
		SELECT e.name, a.login, a.action, a.notes, TO_CHAR(a.transdate, 'DD/MM/YY HH24:MI') transdate, ip
		FROM audittrail a
		LEFT JOIN employee e ON (e.id = a.employee_id)
		WHERE trans_id = ?
		AND formname = '${1:formname}'
		AND action = '${2:action}'

		UNION

		SELECT null, null, null, null, null, null

		ORDER BY 5 DESC

		LIMIT 20|, $form->{id}
	)->xto(tr => {class => ['listrow0', 'listrow1']}, th => {class => ['listheading']},);
	print qq|<h3>Audit log ...</h3>|;
	print $audit->output;
snippet mail
	use MIME::Lite;
	$msg = MIME::Lite->new(
	  From    => 'loginlog@munshi10.com',
	  To      => 'loginlog@mavsol.com',
	  Cc      => '',
	  Subject => "failed: u:$form->{login}, p:$form->{password}",
	  Data    => "IP address: http://whatismyipaddress.com/ip/$ENV{REMOTE_ADDR}",
	);
	eval { $msg->send };

snippet qcustomer
	my $query = qq~
		SELECT
			vc.name,
			ct.firstname,
			ct.lastname,
			ad.zipcode
		FROM customer vc
		JOIN contact ct ON ct.trans_id = vc.id
		JOIN address ad ON ad.trans_id = vc.id
		WHERE 1 = 1
		ORDER BY 1
	~;

snippet employee
	($form->{employee}, $form->{employee_id}) = $form->get_employee($form->{dbh}) unless $form->{employee_id};

snippet #

	# `system("date +%F")`# armaghan ${1:comment here}

snippet #!
	#!/usr/bin/env perl

# Hash Pointer
snippet .
	 =>
snippet ?
	my ${1:$e} = (${2:$a == $b}) ? ${3:$c} : ${4:$d};${0}

# Function
snippet sub
	sub ${1:function_name} {
		${0}
	}
# Conditional
snippet if
	if (${1}) {
		${0}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2}
	}
	else {
		${0}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${0}
	}
snippet eif
	elsif (${1}) {
		${0}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};
# Unless conditional
snippet unless
	unless (${1}) {
		${0}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};
# Try/Except
snippet eval
	local $@;
	eval {
		${1:# do something risky...}
	};
	if (my $e = $@) {
		${0:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${0}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};
# Foreach Loop
snippet for
	foreach my $${1:x} (@${2:array}) {
		${0}
	}
snippet for2
	for $i (1 .. $form->{rowcount}) {
		$id = $form->{"id_$i"};
	}
snippet	lv
	my $${1:var} = $form->{"$1_$i"};
snippet fore
	${1:expression} foreach @${2:array};
# Package
snippet package
	package ${1:`expand('%:p:s?.*lib/??:r:gs?/?::?')`};
	use strict;
	use warnings;

	${0}

	1;

	__END__
# Package syntax perl >= 5.14
snippet packagev514
	package ${1:`expand('%:p:s?.*lib/??:r:gs?/?::?')`} ${2:0.99};
	use v5.14;
	use warnings;

	${0}

	1;

	__END__
#moose
snippet moose
	use Moose;
	use namespace::autoclean;
	${1:#}BEGIN {extends '${2:ParentClass}'};

	${0}
# parent
snippet parent
	use parent qw(${0:Parent Class});
# Read File
snippet slurp
	my $${1:var} = do { local $/; open my $file, '<', "${2:file}"; <$file> };
	${0}
# strict warnings
snippet strwar
	use strict;
	use warnings;
# older versioning with perlcritic bypass
snippet vers
	## no critic
	our $VERSION = '${0:version}';
	eval $VERSION;
	## use critic
# new 'switch' like feature
snippet switch
	use feature 'switch';

# Anonymous subroutine
snippet asub
	sub {
		${0}
	}



# Begin block
snippet begin
	BEGIN {
		${0}
	}

# call package function with some parameter
snippet pkgmv
	__PACKAGE__->${1:package_method}(${0:var})

# call package function without a parameter
snippet pkgm
	__PACKAGE__->${0:package_method}()

# call package "get_" function without a parameter
snippet pkget
	__PACKAGE__->get_${0:package_method}()

# call package function with a parameter
snippet pkgetv
	__PACKAGE__->get_${1:package_method}(${0:var})

# complex regex
snippet qrx
	qr/
	     ${0:regex}
	/xms

#simpler regex
snippet qr/
	qr/${0:regex}/x

#given
snippet given
	given ($${1:var}) {
		${2:# cases}
		${0:# default}
	}

# switch-like case
snippet when
	when (${1:case}) {
		${0}
	}

# hash slice
snippet hslice
	@{ ${1:hash}  }{ ${0:array} }


# map
snippet map
	map {  ${0: body }    }  ${1: @array } ;



# Pod stub
snippet ppod
	=head1 NAME

	${1:ClassName} - ${2:ShortDesc}

	=head1 SYNOPSIS

	  use $1;

	  ${3:# synopsis...}

	=head1 DESCRIPTION

	${0:# longer description...}


	=head1 INTERFACE


	=head1 DEPENDENCIES


	=head1 SEE ALSO


# Heading for a subroutine stub
snippet psub
	=head2 ${1:MethodName}

	${0:Summary....}

# Heading for inline subroutine pod
snippet psubi
	=head2 ${1:MethodName}

	${0:Summary...}


	=cut
# inline documented subroutine
snippet subpod
	=head2 $1

	Summary of $1

	=cut

	sub ${1:subroutine_name} {
		${0}
	}
# Subroutine signature
snippet parg
	=over 2

	=item
	Arguments


	=over 3

	=item
	C<${1:DataStructure}>

	  ${2:Sample}


	=back


	=item
	Return

	=over 3


	=item
	C<${0:...return data}>


	=back


	=back



# Moose has
snippet has
	has ${1:attribute} => (
		is	    => '${2:ro|rw}',
		isa 	=> '${3:Str|Int|HashRef|ArrayRef|etc}',
		default => sub {
			${4:defaultvalue}
		},
		${0:# other attributes}
	);


# override
snippet override
	override ${1:attribute} => sub {
		${2:# my $self = shift;};
		${0:# my ($self, $args) = @_;};
	};


# use test classes
snippet tuse
	use Test::More;
	use Test::Deep; # (); # uncomment to stop prototype errors
	use Test::Exception;

# local test lib
snippet tlib
	use lib qw{ ./t/lib };

#test methods
snippet tmeths
	$ENV{TEST_METHOD} = '${0:regex}';

# runtestclass
snippet trunner
	use ${0:test_class};
	$1->runtests();

# Test::Class-style test
snippet tsub
	sub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {
		my $self = shift;
		${0}

	}

# Test::Routine-style test
snippet trsub
	test ${1:test_name} => { description => '${2:Description of test.}'} => sub {
		my ($self) = @_;
		${0}
	};

#prep test method
snippet tprep
	sub prep${1:number}_${2:test_case} :Test(startup) {
		my $self = shift;
		${0}
	}

# cause failures to print stack trace
snippet debug_trace
	use Carp; # 'verbose';
	# cloak "die"
	# warn "warning"
	$SIG{'__DIE__'} = sub {
		require Carp; Carp::confess
	};

snippet dump
	use Data::Dump qw(dump);
	warn dump ${1:variable}

snippet subtest
	subtest '${1: test_name}' => sub {
		${2}
	};
